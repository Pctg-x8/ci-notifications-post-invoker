// Generated by purs bundle 0.14.3
var PS = {};
(function(exports) {
  "use strict";

  const github = require("@actions/github");

  exports.repoOwner = github.context.repo.owner;
  exports.repoName = github.context.repo.repo;
  exports.runId = github.context.runId;
  exports.runNumber = github.context.runNumber;
  exports.sha = github.context.sha;
  exports.ref = github.context.ref;
})(PS["Actions.Context"] = PS["Actions.Context"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Actions.Context"] = $PS["Actions.Context"] || {};
  var exports = $PS["Actions.Context"];
  var $foreign = $PS["Actions.Context"];
  exports["repoOwner"] = $foreign.repoOwner;
  exports["repoName"] = $foreign.repoName;
  exports["runId"] = $foreign.runId;
  exports["runNumber"] = $foreign.runNumber;
  exports["sha"] = $foreign.sha;
  exports["ref"] = $foreign.ref;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  }; 
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["discard"] = discard;
  exports["discardUnit"] = discardUnit;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["voidLeft"] = voidLeft;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Category = $PS["Control.Category"];  
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["fromJust"] = fromJust;
})(PS);
(function(exports) {
  "use strict";

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toUpper = function (s) {
    return s.toUpperCase();
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];                
  var $$null = function (s) {
      return s === "";
  };
  exports["null"] = $$null;
  exports["split"] = $foreign.split;
  exports["toUpper"] = $foreign.toUpper;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.message = function (e) {
    return e.message;
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  var $$throw = function ($2) {
      return $foreign.throwException($foreign.error($2));
  };
  exports["throw"] = $$throw;
  exports["error"] = $foreign.error;
  exports["message"] = $foreign.message;
})(PS);
(function(exports) {
  "use strict";

  exports.process = process;
})(PS["Node.Process"] = PS["Node.Process"] || {});
(function(exports) {
  "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn4"] = $foreign.runFn4;
})(PS);
(function(exports) {
  "use strict";

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["poke"] = $foreign.poke;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];              
  var thawST = $foreign["_copyST"];
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(function __do() {
              var s = thawST(m)();
              f(s)();
              return s;
          });
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["empty"] = $foreign.empty;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Node.Process"] = $PS["Node.Process"] || {};
  var exports = $PS["Node.Process"];
  var $foreign = $PS["Node.Process"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  var lookupMutableObject = function (k) {
      return function (o) {
          return mkEffect(function (v) {
              return Foreign_Object.lookup(k)(o);
          });
      };
  };
  var lookupEnv = function (k) {
      return lookupMutableObject(k)($foreign.process.env);
  };
  exports["lookupEnv"] = lookupEnv;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Actions.Core"] = $PS["Actions.Core"] || {};
  var exports = $PS["Actions.Core"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Effect = $PS["Effect"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Node_Process = $PS["Node.Process"];                
  var workspacePath = Data_Functor.map(Effect.functorEffect)(Data_Maybe.fromJust())(Node_Process.lookupEnv("GITHUB_WORKSPACE"));
  var headRef = Node_Process.lookupEnv("GITHUB_HEAD_REF");
  var getInput = function (name) {
      return Node_Process.lookupEnv("INPUT_" + Data_String_Common.toUpper(name));
  };
  var getRequiredInput = function (name) {
      return Control_Bind.bind(Effect.bindEffect)(getInput(name))(Data_Maybe.maybe(Effect_Exception["throw"]("Input required and not supplied: " + name))(Control_Applicative.pure(Effect.applicativeEffect)));
  };
  exports["workspacePath"] = workspacePath;
  exports["headRef"] = headRef;
  exports["getRequiredInput"] = getRequiredInput;
})(PS);
(function(exports) {
  "use strict";

  const { exec } = require("@actions/exec");

  // call effect
  function transformListeners(listeners) {
      const newListeners = {};
      if (listeners.stdout) {
          newListeners.stdout = function(b) { listeners.stdout(b)(); };
      }

      return newListeners;
  }
  function transformOptions(opts) {
      const newOptions = Object.assign({}, opts);
      if (newOptions.listeners) {
          newOptions.listeners = transformListeners(newOptions.listeners);
      }

      return newOptions;
  }

  exports.execNative = function(command) {
      return function(args) {
          return function(options) {
              return function(failureCallback) {
                  return function(successCallback) {
                      return function() {
                          exec(command, args, transformOptions(options)).then(
                              s => successCallback(s)(), e => failureCallback(e)()
                          );
                      };
                  };
              };
          };
      };
  };
})(PS["Actions.Exec"] = PS["Actions.Exec"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];                
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* eslint-disable no-unused-vars, no-prototype-builtins, no-use-before-define, no-unused-labels, no-param-reassign */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._parAffMap = function (f) {
    return function (aff) {
      return Aff.ParMap(f, aff);
    };
  };

  exports._parAffApply = function (aff1) {
    return function (aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  };

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };  

  exports._sequential = Aff.Seq;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                        
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var MonadError = function (MonadThrow0, catchError) {
      this.MonadThrow0 = MonadThrow0;
      this.catchError = catchError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };                                                      
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))((function () {
              var $17 = Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0());
              return function ($18) {
                  return $17(Data_Either.Left.create($18));
              };
          })());
      };
  };
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
  exports["MonadError"] = MonadError;
  exports["try"] = $$try;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Parallel.Class"] = $PS["Control.Parallel.Class"] || {};
  var exports = $PS["Control.Parallel.Class"];       
  var Parallel = function (Applicative1, Monad0, parallel, sequential) {
      this.Applicative1 = Applicative1;
      this.Monad0 = Monad0;
      this.parallel = parallel;
      this.sequential = sequential;
  };
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
  exports["Parallel"] = Parallel;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];         
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };                                                         
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var functorParAff = new Data_Functor.Functor($foreign["_parAffMap"]);
  var functorAff = new Data_Functor.Functor($foreign["_map"]);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var launchAff_ = (function () {
      var $40 = Data_Functor["void"](Effect.functorEffect);
      return function ($41) {
          return $40(launchAff($41));
      };
  })();
  var applyParAff = new Control_Apply.Apply(function () {
      return functorParAff;
  }, $foreign["_parAffApply"]);
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign["_bind"]);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign["_pure"]);
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign["_liftEffect"]);
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign["_throwError"]);
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowAff;
  }, $foreign["_catchError"]);
  var parallelAff = new Control_Parallel_Class.Parallel(function () {
      return applicativeParAff;
  }, function () {
      return monadAff;
  }, Unsafe_Coerce.unsafeCoerce, $foreign["_sequential"]);
  var applicativeParAff = new Control_Applicative.Applicative(function () {
      return applyParAff;
  }, (function () {
      var $50 = Control_Parallel_Class.parallel(parallelAff);
      var $51 = Control_Applicative.pure(applicativeAff);
      return function ($52) {
          return $50($51($52));
      };
  })());
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  exports["launchAff_"] = launchAff_;
  exports["nonCanceler"] = nonCanceler;
  exports["functorAff"] = functorAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["functorParAff"] = functorParAff;
  exports["applyParAff"] = applyParAff;
  exports["parallelAff"] = parallelAff;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Actions.Exec"] = $PS["Actions.Exec"] || {};
  var exports = $PS["Actions.Exec"];
  var $foreign = $PS["Actions.Exec"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];                
  var exec = function (cmd) {
      return function (args) {
          return function (opts) {
              return Effect_Aff.makeAff(function (handler) {
                  return function __do() {
                      $foreign.execNative(cmd)(args)(opts)(function ($1) {
                          return handler(Data_Either.Left.create($1));
                      })(function ($2) {
                          return handler(Data_Either.Right.create($2));
                      })();
                      return function (v) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                      };
                  };
              });
          };
      };
  };
  exports["exec"] = exec;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeExtractErrorCode = function(e) { return e.code; };
})(PS["BuildLogs"] = PS["BuildLogs"] || {});
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Node.Encoding"] = $PS["Node.Encoding"] || {};
  var exports = $PS["Node.Encoding"];
  var Data_Show = $PS["Data.Show"];                
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var UTF8 = (function () {
      function UTF8() {

      };
      UTF8.value = new UTF8();
      return UTF8;
  })();
  var UTF16LE = (function () {
      function UTF16LE() {

      };
      UTF16LE.value = new UTF16LE();
      return UTF16LE;
  })();
  var UCS2 = (function () {
      function UCS2() {

      };
      UCS2.value = new UCS2();
      return UCS2;
  })();
  var Base64 = (function () {
      function Base64() {

      };
      Base64.value = new Base64();
      return Base64;
  })();
  var Latin1 = (function () {
      function Latin1() {

      };
      Latin1.value = new Latin1();
      return Latin1;
  })();
  var Binary = (function () {
      function Binary() {

      };
      Binary.value = new Binary();
      return Binary;
  })();
  var Hex = (function () {
      function Hex() {

      };
      Hex.value = new Hex();
      return Hex;
  })();
  var showEncoding = new Data_Show.Show(function (v) {
      if (v instanceof ASCII) {
          return "ASCII";
      };
      if (v instanceof UTF8) {
          return "UTF8";
      };
      if (v instanceof UTF16LE) {
          return "UTF16LE";
      };
      if (v instanceof UCS2) {
          return "UCS2";
      };
      if (v instanceof Base64) {
          return "Base64";
      };
      if (v instanceof Latin1) {
          return "Latin1";
      };
      if (v instanceof Binary) {
          return "Binary";
      };
      if (v instanceof Hex) {
          return "Hex";
      };
      throw new Error("Failed pattern match at Node.Encoding (line 19, column 1 - line 27, column 23): " + [ v.constructor.name ]);
  });
  var encodingToNode = function (v) {
      if (v instanceof ASCII) {
          return "ascii";
      };
      if (v instanceof UTF8) {
          return "utf8";
      };
      if (v instanceof UTF16LE) {
          return "utf16le";
      };
      if (v instanceof UCS2) {
          return "ucs2";
      };
      if (v instanceof Base64) {
          return "base64";
      };
      if (v instanceof Latin1) {
          return "latin1";
      };
      if (v instanceof Binary) {
          return "binary";
      };
      if (v instanceof Hex) {
          return "hex";
      };
      throw new Error("Failed pattern match at Node.Encoding (line 31, column 1 - line 31, column 37): " + [ v.constructor.name ]);
  };
  exports["UTF8"] = UTF8;
  exports["encodingToNode"] = encodingToNode;
  exports["showEncoding"] = showEncoding;
})(PS);
(function(exports) {
  "use strict";

  exports.handleCallbackImpl = function (left, right, f) {
    return function (err, value) {
      if (err) {
        f(left(err))();
      } else {
        f(right(value))();
      }
    };
  };
})(PS["Node.FS.Async"] = PS["Node.FS.Async"] || {});
(function(exports) {
  "use strict";

  exports.unsafeRequireFS = require("fs");
})(PS["Node.FS.Internal"] = PS["Node.FS.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Node.FS.Internal"] = $PS["Node.FS.Internal"] || {};
  var exports = $PS["Node.FS.Internal"];
  var $foreign = $PS["Node.FS.Internal"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  exports["mkEffect"] = mkEffect;
  exports["unsafeRequireFS"] = $foreign.unsafeRequireFS;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Node.FS.Async"] = $PS["Node.FS.Async"] || {};
  var exports = $PS["Node.FS.Async"];
  var $foreign = $PS["Node.FS.Async"];
  var Data_Either = $PS["Data.Either"];
  var Data_Show = $PS["Data.Show"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Internal = $PS["Node.FS.Internal"];          
  var handleCallback = function (cb) {
      return $foreign.handleCallbackImpl(Data_Either.Left.create, Data_Either.Right.create, cb);
  };
  var fs = Node_FS_Internal.unsafeRequireFS;                                                                                  
  var readFile = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.readFile(file, {}, handleCallback(cb));
          });
      };
  };
  var readTextFile = function (encoding) {
      return function (file) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.readFile(file, {
                      encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                  }, handleCallback(cb));
              });
          };
      };
  };
  exports["readTextFile"] = readTextFile;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Node.FS.Aff"] = $PS["Node.FS.Aff"] || {};
  var exports = $PS["Node.FS.Aff"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Node_FS_Async = $PS["Node.FS.Async"];                
  var toAff = function (p) {
      return Effect_Aff.makeAff(function (k) {
          return Data_Functor.voidLeft(Effect.functorEffect)(p(k))(Effect_Aff.nonCanceler);
      });
  };                                        
  var toAff2 = function (f) {
      return function (a) {
          return function (b) {
              return toAff(f(a)(b));
          };
      };
  };                                          
  var readTextFile = toAff2(Node_FS_Async.readTextFile);
  exports["readTextFile"] = readTextFile;
})(PS);
(function(exports) {
  "use strict";
  var path =require("path");         

  exports.concat = function (segments) {
    return path.join.apply(this, segments);
  };
})(PS["Node.Path"] = PS["Node.Path"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Node.Path"] = $PS["Node.Path"] || {};
  var exports = $PS["Node.Path"];
  var $foreign = $PS["Node.Path"];
  exports["concat"] = $foreign.concat;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["BuildLogs"] = $PS["BuildLogs"] || {};
  var exports = $PS["BuildLogs"];
  var $foreign = $PS["BuildLogs"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Aff = $PS["Node.FS.Aff"];
  var Node_Path = $PS["Node.Path"];                
  var rawbuildlogPath = function (workspacePath) {
      return Node_Path.concat([ workspacePath, ".rawbuildlog" ]);
  };
  var maxAvailableLines = 15;
  var loadLogs = function (path) {
      return Control_Monad_Error_Class.catchError(Effect_Aff.monadErrorAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Maybe.Just.create)(Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(path)))(function (e) {
          var $0 = $foreign.unsafeExtractErrorCode(e) === "ENOENT";
          if ($0) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
          };
          return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(e);
      });
  };
  var buildlogPath = function (workspacePath) {
      return Node_Path.concat([ workspacePath, ".buildlog" ]);
  };
  exports["maxAvailableLines"] = maxAvailableLines;
  exports["rawbuildlogPath"] = rawbuildlogPath;
  exports["buildlogPath"] = buildlogPath;
  exports["loadLogs"] = loadLogs;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };   

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Category = $PS["Control.Category"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["fold"] = fold;
  exports["intercalate"] = intercalate;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var take = function (n) {
      return function (xs) {
          var $67 = n < 1;
          if ($67) {
              return [  ];
          };
          return $foreign.slice(0)(n)(xs);
      };
  };
  var intercalate = function (dictMonoid) {
      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(dictMonoid);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var fold = function (dictMonoid) {
      return Data_Foldable.fold(Data_Foldable.foldableArray)(dictMonoid);
  };
  var dropEnd = function (n) {
      return function (xs) {
          return take($foreign.length(xs) - n | 0)(xs);
      };
  };
  var drop = function (n) {
      return function (xs) {
          var $89 = n < 1;
          if ($89) {
              return xs;
          };
          return $foreign.slice(n)($foreign.length(xs))(xs);
      };
  };
  var takeEnd = function (n) {
      return function (xs) {
          return drop($foreign.length(xs) - n | 0)(xs);
      };
  };
  exports["last"] = last;
  exports["index"] = index;
  exports["fold"] = fold;
  exports["intercalate"] = intercalate;
  exports["takeEnd"] = takeEnd;
  exports["dropEnd"] = dropEnd;
  exports["length"] = $foreign.length;
  exports["concat"] = $foreign.concat;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  };                                           
  var eqInt = new Eq($foreign.eqIntImpl);
  exports["eqInt"] = eqInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                                                                                 
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  exports["min"] = min;
  exports["ordInt"] = ordInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.DateTime.Instant"] = $PS["Data.DateTime.Instant"] || {};
  var exports = $PS["Data.DateTime.Instant"];
  var unInstant = function (v) {
      return v;
  };
  exports["unInstant"] = unInstant;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";               

  exports.isFinite = isFinite;

  exports.fromStringImpl = function(str, isFinite, just, nothing) {
    var num = parseFloat(str);
    if (isFinite(num)) {
      return just(num);
    } else {
      return nothing;
    }
  };
})(PS["Data.Number"] = PS["Data.Number"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Number"] = $PS["Data.Number"] || {};
  var exports = $PS["Data.Number"];
  var $foreign = $PS["Data.Number"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var fromString = function (str) {
      return $foreign.fromStringImpl(str, $foreign["isFinite"], Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["fromString"] = fromString;
  exports["isFinite"] = $foreign["isFinite"];
})(PS);
(function(exports) {
  "use strict";              

  function nativeImul(a) {
    return function (b) {
      return Math.imul(a, b);
    };
  }

  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul
  function emulatedImul(a) {
    /*jshint bitwise: false*/
    return function (b) {
      var ah = a >>> 16 & 0xffff;
      var al = a & 0xffff;
      var bh = b >>> 16 & 0xffff;
      var bl = b & 0xffff;
      // the shift by 0 fixes the sign on the high part
      // the final |0 converts the unsigned value into a signed value
      return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
    };
  } 

  exports.round = Math.round;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["round"] = $foreign.round;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Number = $PS["Data.Number"];
  var $$Math = $PS["Math"];
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (!Data_Number["isFinite"](x)) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  exports["round"] = round;
  exports["fromString"] = fromString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function (dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var wrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  var unwrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  var over = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return Safe_Coerce.coerce();
          };
      };
  };
  exports["wrap"] = wrap;
  exports["unwrap"] = unwrap;
  exports["over"] = over;
})(PS);
(function(exports) {
  "use strict";

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                       
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  exports["zero"] = zero;
  exports["semiringNumber"] = semiringNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  }; 
  var ringNumber = new Ring(function () {
      return Data_Semiring.semiringNumber;
  }, $foreign.numSub);
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["negate"] = negate;
  exports["ringNumber"] = ringNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.regexImpl = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports.replace = function (r) {
    return function (s1) {
      return function (s2) {
        return s2.replace(r, s1);
      };
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.String.Regex"] = $PS["Data.String.Regex"] || {};
  var exports = $PS["Data.String.Regex"];
  var $foreign = $PS["Data.String.Regex"];
  var Data_Either = $PS["Data.Either"];                                                        
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.dotAll) {
              return "s";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })()))));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign.regexImpl(Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  exports["regex"] = regex;
  exports["replace"] = $foreign.replace;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.String.Regex.Flags"] = $PS["Data.String.Regex.Flags"] || {};
  var exports = $PS["Data.String.Regex.Flags"];                      
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var noFlags = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: false
  });
  exports["noFlags"] = noFlags;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.String.Regex.Unsafe"] = $PS["Data.String.Regex.Unsafe"] || {};
  var exports = $PS["Data.String.Regex.Unsafe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var unsafeRegex = function (s) {
      return function (f) {
          return Data_Either.either(Partial_Unsafe.unsafeCrashWith)(Control_Category.identity(Control_Category.categoryFn))(Data_String_Regex.regex(s)(f));
      };
  };
  exports["unsafeRegex"] = unsafeRegex;
})(PS);
(function(exports) {
  "use strict";

  function codePointAtImpl (just, nothing, i, s) {
    var codePointArray = Array.from(s);
    var isWithinRange  = i >= 0 && i < codePointArray.length;

    return isWithinRange ? just(codePointArray[i].codePointAt(0)) : nothing;
  }

  function codePointAtPrimeImpl (just, nothing, i, s) {
    return i >= 0 && i < s.length ? just(s.codePointAt(i)) : nothing;
  }

  function endsWithImpl (searchString, s) {
    return s.endsWith(searchString);
  }

  function endsWithPrimeImpl (searchString, position, s) {
    return s.endsWith(searchString, position);
  }

  function escapeRegexImpl (str) {
    return str.replace(/[.*+?^${}()|[\]\-\\]/g, "\\$&");
  }

  function fromCharArrayImpl (array) {
    return array.join("");
  }

  function includesImpl (searchString, str) {
    return str.includes(searchString);
  }

  function includesPrimeImpl (needle, position, haystack) {
    // For negative `position` values, we search from the beginning of the
    // string. This is in accordance with the native
    // `String.prototype.include` function.
    var pos = Math.max(0, position);

    // Converting to arrays takes care of any surrogate code points
    var needleA    = Array.from(needle);
    var haystackA  = Array.from(haystack).slice(pos);
    var needleALen = needleA.length;

    var maxIndex = haystackA.length + 1 - needleALen;
    var found    = false;
    var i;

    // Naive implementation, at some point we should check whether Boyer-Moore
    // or Knuth-Morris-Pratt are worthwhile
    for (i = 0; i < maxIndex; i++) {
      if (needleA.every(function (e, j) { return e === haystackA[i+j]; })) {
        found = true;
        break;
      }
    }

    return found;
  }

  function lengthImpl (str) {
    return Array.from(str).length;
  }

  function linesImpl (str) {
    // See http://www.unicode.org/reports/tr18/#RL1.6
    return str.split(/\r\n|[\n\v\f\r\u0085\u2028\u2029]/);
  }

  function normalizeImpl (str) {
    return str.normalize();
  }

  function normalizePrimeImpl (normalizationForm, str) {
    return str.normalize(normalizationForm);
  }

  function padEndPrimeImpl (targetLength, str) {
    return str.padEnd(targetLength);
  }

  function padStartPrimeImpl (targetLength, str) {
    return str.padStart(targetLength);
  }

  function repeatImpl (just, nothing, n, str) {
    var result;

    try {
      result = just(str.repeat(n));
    }
    catch (error) {
      result = nothing;
    }

    return result;
  }

  function startsWithImpl (searchString, s) {
    return s.startsWith(searchString);
  }

  function startsWithPrimeImpl (searchString, position, s) {
    return s.startsWith(searchString, position);
  }

  function stripCharsImpl (chars, s) {
    return s.replace(RegExp("[" + escapeRegexImpl(chars) + "]", "g"), "");
  }

  function stripDiacriticsImpl (str) {
    return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
  }

  function toCharArrayImpl (str) {
    return Array.from(str);
  }

  function unsafeCodePointAtImpl (i, s) {
    var codePointArray = Array.from(s);
    var isWithinRange = i >= 0 && i < codePointArray.length;

    if (isWithinRange) {
      return codePointArray[i].codePointAt(0);
    }
    else {
      throw new Error("Data.String.Utils.unsafeCodePointAt: Invalid index");
    }
  }

  function unsafeCodePointAtPrimeImpl (i, s) {
    if (i >= 0 && i < s.length) {
      return s.codePointAt(i);
    }
    else {
      throw new Error("Data.String.Utils.unsafeCodePointAt': Invalid index");
    }
  }

  function unsafeRepeatImpl (n, str) {
    try {
      return str.repeat(n);
    }
    catch (error) {
      throw new Error("Data.String.Utils.unsafeRepeat: Invalid count");
    }
  }

  function wordsImpl (s) {
    // Split at every Unicode whitespace character (25 as of Unicode 12.1)
    return s.split(/[\u000a-\u000d\u0085\u2028\u2029\u0009\u0020\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000]+/);
  }                                                         
  exports.endsWithImpl               = endsWithImpl;
})(PS["Data.String.Utils"] = PS["Data.String.Utils"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.String.Utils"] = $PS["Data.String.Utils"] || {};
  var exports = $PS["Data.String.Utils"];
  var $foreign = $PS["Data.String.Utils"];
  var Data_Unit = $PS["Data.Unit"];
  var trimEnd = function (s) {
      return s.trimEnd(Data_Unit.unit);
  };
  var endsWith = function (searchString) {
      return function (s) {
          return $foreign.endsWithImpl(searchString, s);
      };
  };
  exports["endsWith"] = endsWith;
  exports["trimEnd"] = trimEnd;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];                  
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Time.Duration"] = $PS["Data.Time.Duration"] || {};
  var exports = $PS["Data.Time.Duration"];
  var Control_Category = $PS["Control.Category"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Seconds = function (x) {
      return x;
  };
  var Milliseconds = function (x) {
      return x;
  };
  var Duration = function (fromDuration, toDuration) {
      this.fromDuration = fromDuration;
      this.toDuration = toDuration;
  };
  var toDuration = function (dict) {
      return dict.toDuration;
  }; 
  var semigroupSeconds = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return v + v1;
      };
  });     
  var fromDuration = function (dict) {
      return dict.fromDuration;
  };
  var negateDuration = function (dictDuration) {
      var $41 = toDuration(dictDuration);
      var $42 = Data_Newtype.over()()(Milliseconds)(Data_Ring.negate(Data_Ring.ringNumber));
      var $43 = fromDuration(dictDuration);
      return function ($44) {
          return $41($42($43($44)));
      };
  };                            
  var durationSeconds = new Duration(Data_Newtype.over()()(Seconds)(function (v) {
      return v * 1000.0;
  }), Data_Newtype.over()()(Milliseconds)(function (v) {
      return v / 1000.0;
  }));
  var durationMilliseconds = new Duration(Control_Category.identity(Control_Category.categoryFn), Control_Category.identity(Control_Category.categoryFn));
  var convertDuration = function (dictDuration) {
      return function (dictDuration1) {
          var $45 = toDuration(dictDuration1);
          var $46 = fromDuration(dictDuration);
          return function ($47) {
              return $45($46($47));
          };
      };
  };
  exports["convertDuration"] = convertDuration;
  exports["negateDuration"] = negateDuration;
  exports["semigroupSeconds"] = semigroupSeconds;
  exports["durationMilliseconds"] = durationMilliseconds;
  exports["durationSeconds"] = durationSeconds;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
  exports["error"] = $foreign.error;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect.Class.Console"] = $PS["Effect.Class.Console"] || {};
  var exports = $PS["Effect.Class.Console"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var log = function (dictMonadEffect) {
      var $30 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($31) {
          return $30(Effect_Console.log($31));
      };
  };
  var error = function (dictMonadEffect) {
      var $40 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($41) {
          return $40(Effect_Console.error($41));
      };
  };
  exports["log"] = log;
  exports["error"] = error;
})(PS);
(function(exports) {
  "use strict";

  exports.now = function () {
    return Date.now();
  };
})(PS["Effect.Now"] = PS["Effect.Now"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect.Now"] = $PS["Effect.Now"] || {};
  var exports = $PS["Effect.Now"];
  var $foreign = $PS["Effect.Now"];
  exports["now"] = $foreign.now;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var modify_ = function (f) {
      return function (s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
  };
  exports["modify_"] = modify_;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var unsafeToForeign = Unsafe_Coerce.unsafeCoerce;
  exports["unsafeToForeign"] = unsafeToForeign;
})(PS);
(function(exports) {
  exports['null'] = null;
})(PS["Foreign.NullOrUndefined"] = PS["Foreign.NullOrUndefined"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Foreign.NullOrUndefined"] = $PS["Foreign.NullOrUndefined"] || {};
  var exports = $PS["Foreign.NullOrUndefined"];
  var $foreign = $PS["Foreign.NullOrUndefined"];
  exports["null"] = $foreign["null"];
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeUnionFn = function(r1, r2) {
    var copy = {};
    for (var k1 in r2) {
      if ({}.hasOwnProperty.call(r2, k1)) {
        copy[k1] = r2[k1];
      }
    }
    for (var k2 in r1) {
      if ({}.hasOwnProperty.call(r1, k2)) {
        copy[k2] = r1[k2];
      }
    }
    return copy;
  };
})(PS["Record.Unsafe.Union"] = PS["Record.Unsafe.Union"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Record.Unsafe.Union"] = $PS["Record.Unsafe.Union"] || {};
  var exports = $PS["Record.Unsafe.Union"];
  var $foreign = $PS["Record.Unsafe.Union"];
  exports["unsafeUnionFn"] = $foreign.unsafeUnionFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Record_Unsafe_Union = $PS["Record.Unsafe.Union"];
  var merge = function (dictUnion) {
      return function (dictNub) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe_Union.unsafeUnionFn(l, r);
              };
          };
      };
  };
  var get = function (dictIsSymbol) {
      return function (dictCons) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  exports["get"] = get;
  exports["merge"] = merge;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Type.Data.RowList"] = $PS["Type.Data.RowList"] || {};
  var exports = $PS["Type.Data.RowList"];
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Foreign.Generic.Class"] = $PS["Foreign.Generic.Class"] || {};
  var exports = $PS["Foreign.Generic.Class"];
  var Control_Category = $PS["Control.Category"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Foreign = $PS["Foreign"];
  var Foreign_NullOrUndefined = $PS["Foreign.NullOrUndefined"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Record = $PS["Record"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];  
  var TaggedObject = (function () {
      function TaggedObject(value0) {
          this.value0 = value0;
      };
      TaggedObject.create = function (value0) {
          return new TaggedObject(value0);
      };
      return TaggedObject;
  })();
  var EncodeWithOptions = function (encodeWithOptions) {
      this.encodeWithOptions = encodeWithOptions;
  };
  var EncodeRecord = function (encodeRecordWithOptions) {
      this.encodeRecordWithOptions = encodeRecordWithOptions;
  };
  var Encode = function (encode) {
      this.encode = encode;
  }; 
  var stringEncode = new Encode(Foreign.unsafeToForeign);                        
  var intEncode = new Encode(Foreign.unsafeToForeign);                                                                                 
  var encodeWithOptions = function (dict) {
      return dict.encodeWithOptions;
  };
  var encodeRecordWithOptions = function (dict) {
      return dict.encodeRecordWithOptions;
  };
  var encodeWithOptionsRecord = function (dictRowToList) {
      return function (dictEncodeRecord) {
          return new EncodeWithOptions(function (opts) {
              var $148 = encodeRecordWithOptions(dictEncodeRecord)(Type_Data_RowList.RLProxy.value)(opts);
              return function ($149) {
                  return Foreign.unsafeToForeign($148($149));
              };
          });
      };
  };
  var encodeRecordNil = new EncodeRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return Foreign_Object.empty;
          };
      };
  });
  var encodeRecordCons = function (dictCons) {
      return function (dictEncodeRecord) {
          return function (dictIsSymbol) {
              return function (dictEncodeWithOptions) {
                  return new EncodeRecord(function (v) {
                      return function (opts) {
                          return function (rec) {
                              var obj = encodeRecordWithOptions(dictEncodeRecord)(Type_Data_RowList.RLProxy.value)(opts)(rec);
                              var l = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              return Foreign_Object.insert(opts.fieldTransform(l))(encodeWithOptions(dictEncodeWithOptions)(opts)(Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(rec)))(obj);
                          };
                      };
                  });
              };
          };
      };
  };
  var encode = function (dict) {
      return dict.encode;
  };
  var encodeWithOptionsOther = function (dictEncode) {
      return new EncodeWithOptions(function (v) {
          return encode(dictEncode);
      });
  };
  var maybeEncode = function (dictEncode) {
      return new Encode(Data_Maybe.maybe(Foreign_NullOrUndefined["null"])(encode(dictEncode)));
  };
  var defaultOptions = {
      sumEncoding: new TaggedObject({
          tagFieldName: "tag",
          contentsFieldName: "contents",
          constructorTagTransform: Control_Category.identity(Control_Category.categoryFn)
      }),
      unwrapSingleConstructors: false,
      unwrapSingleArguments: true,
      fieldTransform: Control_Category.identity(Control_Category.categoryFn)
  };
  var recordEncode = function (dictRowToList) {
      return function (dictEncodeRecord) {
          return new Encode(encodeWithOptions(encodeWithOptionsRecord()(dictEncodeRecord))(defaultOptions));
      };
  };
  exports["encode"] = encode;
  exports["stringEncode"] = stringEncode;
  exports["intEncode"] = intEncode;
  exports["maybeEncode"] = maybeEncode;
  exports["recordEncode"] = recordEncode;
  exports["encodeWithOptionsRecord"] = encodeWithOptionsRecord;
  exports["encodeWithOptionsOther"] = encodeWithOptionsOther;
  exports["encodeRecordNil"] = encodeRecordNil;
  exports["encodeRecordCons"] = encodeRecordCons;
})(PS);
(function(exports) {
  exports.unsafeStringify = function (x) {
    return JSON.stringify(x);
  };
})(PS["Foreign.Internal.Stringify"] = PS["Foreign.Internal.Stringify"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Foreign.Internal.Stringify"] = $PS["Foreign.Internal.Stringify"] || {};
  var exports = $PS["Foreign.Internal.Stringify"];
  var $foreign = $PS["Foreign.Internal.Stringify"];
  exports["unsafeStringify"] = $foreign.unsafeStringify;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Foreign.Generic"] = $PS["Foreign.Generic"] || {};
  var exports = $PS["Foreign.Generic"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Foreign_Internal_Stringify = $PS["Foreign.Internal.Stringify"];
  var encodeJSON = function (dictEncode) {
      var $18 = Foreign_Generic_Class.encode(dictEncode);
      return function ($19) {
          return Foreign_Internal_Stringify.unsafeStringify($18($19));
      };
  };
  exports["encodeJSON"] = encodeJSON;
})(PS);
(function(exports) {
  "use strict";

  exports.splitN = function(s) { return function(lim) { return function(t) { return t.split(s, lim); }; }; };
})(PS["Helper"] = PS["Helper"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Helper"] = $PS["Helper"] || {};
  var exports = $PS["Helper"];
  var $foreign = $PS["Helper"];
  exports["splitN"] = $foreign.splitN;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Inputs"] = $PS["Inputs"] || {};
  var exports = $PS["Inputs"];
  var Actions_Core = $PS["Actions.Core"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_DateTime_Instant = $PS["Data.DateTime.Instant"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Number = $PS["Data.Number"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];
  var Effect = $PS["Effect"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Now = $PS["Effect.Now"];                
  var Diff = (function () {
      function Diff() {

      };
      Diff.value = new Diff();
      return Diff;
  })();
  var Branch = (function () {
      function Branch() {

      };
      Branch.value = new Branch();
      return Branch;
  })();
  var succeeded = function (s) {
      return s === "success";
  };
  var status = Actions_Core.getRequiredInput("status");
  var reportName = Actions_Core.getRequiredInput("report_name");
  var prTitle = Actions_Core.getRequiredInput("pr_title");
  var prNumber = Control_Bind.bind(Effect.bindEffect)(Data_Functor.map(Effect.functorEffect)(Data_Int.fromString)(Actions_Core.getRequiredInput("pr_number")))(Data_Maybe.maybe(Effect_Exception["throw"]("invalid pr_number"))(Control_Applicative.pure(Effect.applicativeEffect)));
  var mode = function __do() {
      var v = Actions_Core.getRequiredInput("mode")();
      if (v === "diff") {
          return Diff.value;
      };
      if (v === "branch") {
          return Branch.value;
      };
      return Effect_Exception["throw"]("mode must be either diff or branch")();
  };
  var headSha = Actions_Core.getRequiredInput("head_sha");
  var failureStep = Actions_Core.getRequiredInput("failure_step");
  var endTime = Data_Functor.map(Effect.functorEffect)(Data_DateTime_Instant.unInstant)(Effect_Now.now);
  var beginTime = function __do() {
      var value = Data_Functor.map(Effect.functorEffect)(Data_Number.fromString)(Actions_Core.getRequiredInput("begintime"))();
      return Data_Maybe.maybe(Effect_Exception["throw"]("begintime is not valid integer value"))((function () {
          var $6 = Control_Applicative.pure(Effect.applicativeEffect);
          var $7 = Data_Newtype.wrap();
          return function ($8) {
              return $6($7($8));
          };
      })())(value)();
  };
  var duration = Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)(function (v) {
      return function (v1) {
          return Data_Semigroup.append(Data_Time_Duration.semigroupSeconds)(v1)(Data_Time_Duration.negateDuration(Data_Time_Duration.durationSeconds)(v));
      };
  })(beginTime))(Data_Functor.map(Effect.functorEffect)(Data_Time_Duration.convertDuration(Data_Time_Duration.durationMilliseconds)(Data_Time_Duration.durationSeconds))(endTime));
  var baseSha = Actions_Core.getRequiredInput("base_sha");
  exports["duration"] = duration;
  exports["status"] = status;
  exports["succeeded"] = succeeded;
  exports["failureStep"] = failureStep;
  exports["headSha"] = headSha;
  exports["baseSha"] = baseSha;
  exports["reportName"] = reportName;
  exports["Diff"] = Diff;
  exports["Branch"] = Branch;
  exports["mode"] = mode;
  exports["prNumber"] = prNumber;
  exports["prTitle"] = prTitle;
})(PS);
(function(exports) {
  "use strict";

  const { Lambda } = require("@aws-sdk/client-lambda");
  const CredentialProviders = require("@aws-sdk/credential-providers");

  exports.invokeEventNative = function(name) {
      return function(payload) {
          return function(failureCallback) {
              return function(successCallback) {
                  return function() {
                      var service = new Lambda({
                          region: process.env.AWS_DEFAULT_REGION,
                          credentials: CredentialProviders.fromEnv()
                      });
                      var invokeParams = {
                          FunctionName: name,
                          Payload: payload,
                          InvocationType: "Event"
                      };

                      service.invoke(invokeParams, function(e, data) {
                          if (e) {
                              failureCallback(e)();
                          } else {
                              successCallback(data)();
                          }
                      });
                  };
              };
          };
      };
  };

  exports.awsErrorMessage = function(e) { return e.message; };
})(PS["Lambda"] = PS["Lambda"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Lambda"] = $PS["Lambda"] || {};
  var exports = $PS["Lambda"];
  var $foreign = $PS["Lambda"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign_Generic = $PS["Foreign.Generic"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];                
  var Diff = (function () {
      function Diff(value0) {
          this.value0 = value0;
      };
      Diff.create = function (value0) {
          return new Diff(value0);
      };
      return Diff;
  })();
  var Branch = (function () {
      function Branch(value0) {
          this.value0 = value0;
      };
      Branch.create = function (value0) {
          return new Branch(value0);
      };
      return Branch;
  })();
  var invoke = function (payload) {
      return Effect_Aff.makeAff(function (handler) {
          var payloadStr = (function () {
              if (payload instanceof Diff) {
                  return Foreign_Generic.encodeJSON(Foreign_Generic_Class.recordEncode()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordNil)(new Data_Symbol.IsSymbol(function () {
                      return "support_info";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.maybeEncode(Foreign_Generic_Class.stringEncode))))(new Data_Symbol.IsSymbol(function () {
                      return "status";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))(new Data_Symbol.IsSymbol(function () {
                      return "repository";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))(new Data_Symbol.IsSymbol(function () {
                      return "report_name";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))(new Data_Symbol.IsSymbol(function () {
                      return "ref";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))(new Data_Symbol.IsSymbol(function () {
                      return "pr_number";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.intEncode)))(new Data_Symbol.IsSymbol(function () {
                      return "pr_name";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))(new Data_Symbol.IsSymbol(function () {
                      return "number";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.intEncode)))(new Data_Symbol.IsSymbol(function () {
                      return "failure_step";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.maybeEncode(Foreign_Generic_Class.stringEncode))))(new Data_Symbol.IsSymbol(function () {
                      return "duration";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.intEncode)))(new Data_Symbol.IsSymbol(function () {
                      return "compare_url";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))(new Data_Symbol.IsSymbol(function () {
                      return "commit_hash";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))(new Data_Symbol.IsSymbol(function () {
                      return "commit";
                  }))(Foreign_Generic_Class.encodeWithOptionsRecord()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordNil)(new Data_Symbol.IsSymbol(function () {
                      return "sha";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))(new Data_Symbol.IsSymbol(function () {
                      return "message";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))(new Data_Symbol.IsSymbol(function () {
                      return "committer";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))))(new Data_Symbol.IsSymbol(function () {
                      return "build_url";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode))))(payload.value0);
              };
              if (payload instanceof Branch) {
                  return Foreign_Generic.encodeJSON(Foreign_Generic_Class.recordEncode()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordNil)(new Data_Symbol.IsSymbol(function () {
                      return "support_info";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.maybeEncode(Foreign_Generic_Class.stringEncode))))(new Data_Symbol.IsSymbol(function () {
                      return "status";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))(new Data_Symbol.IsSymbol(function () {
                      return "repository";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))(new Data_Symbol.IsSymbol(function () {
                      return "report_name";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))(new Data_Symbol.IsSymbol(function () {
                      return "number";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.intEncode)))(new Data_Symbol.IsSymbol(function () {
                      return "failure_step";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.maybeEncode(Foreign_Generic_Class.stringEncode))))(new Data_Symbol.IsSymbol(function () {
                      return "duration";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.intEncode)))(new Data_Symbol.IsSymbol(function () {
                      return "commit";
                  }))(Foreign_Generic_Class.encodeWithOptionsRecord()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordNil)(new Data_Symbol.IsSymbol(function () {
                      return "sha";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))(new Data_Symbol.IsSymbol(function () {
                      return "message";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))(new Data_Symbol.IsSymbol(function () {
                      return "committer";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))))(new Data_Symbol.IsSymbol(function () {
                      return "build_url";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))(new Data_Symbol.IsSymbol(function () {
                      return "branch_name";
                  }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode))))(payload.value0);
              };
              throw new Error("Failed pattern match at Lambda (line 52, column 18 - line 54, column 31): " + [ payload.constructor.name ]);
          })();
          var convertError = function ($4) {
              return Effect_Exception.error($foreign.awsErrorMessage($4));
          };
          return function __do() {
              $foreign.invokeEventNative("CIResultNotificationGHA")(payloadStr)(function ($5) {
                  return handler(Data_Either.Left.create(convertError($5)));
              })(function ($6) {
                  return handler(Data_Either.Right.create($6));
              })();
              return function (v) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
              };
          };
      });
  };
  exports["Diff"] = Diff;
  exports["Branch"] = Branch;
  exports["invoke"] = invoke;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Node.Buffer.Class"] = $PS["Node.Buffer.Class"] || {};
  var exports = $PS["Node.Buffer.Class"];
  var MutableBuffer = function (Monad0, concat, concat$prime, copy, create, fill, freeze, fromArray, fromArrayBuffer, fromString, getAtOffset, read, readString, setAtOffset, size, slice, thaw, toArray, toArrayBuffer, toString, unsafeFreeze, unsafeThaw, write, writeString) {
      this.Monad0 = Monad0;
      this.concat = concat;
      this["concat'"] = concat$prime;
      this.copy = copy;
      this.create = create;
      this.fill = fill;
      this.freeze = freeze;
      this.fromArray = fromArray;
      this.fromArrayBuffer = fromArrayBuffer;
      this.fromString = fromString;
      this.getAtOffset = getAtOffset;
      this.read = read;
      this.readString = readString;
      this.setAtOffset = setAtOffset;
      this.size = size;
      this.slice = slice;
      this.thaw = thaw;
      this.toArray = toArray;
      this.toArrayBuffer = toArrayBuffer;
      this.toString = toString;
      this.unsafeFreeze = unsafeFreeze;
      this.unsafeThaw = unsafeThaw;
      this.write = write;
      this.writeString = writeString;
  };
  var toString = function (dict) {
      return dict.toString;
  };
  exports["MutableBuffer"] = MutableBuffer;
  exports["toString"] = toString;
})(PS);
(function(exports) {
  /* global Buffer */
  "use strict";

  exports.copyAll = function (a) {
    return function () {
      return Buffer.from(a);
    };
  };

  exports.writeInternal = function (ty) {
    return function (value) {
      return function (offset) {
        return function (buf) {
          return function () {
            buf["write" + ty](value, offset);
          };
        };
      };
    };
  };

  exports.writeStringInternal = function (encoding) {
    return function (offset) {
      return function (length) {
        return function (value) {
          return function (buff) {
            return function () {
              return buff.write(value, offset, length, encoding);
            };
          };
        };
      };
    };
  };

  exports.setAtOffset = function (value) {
    return function (offset) {
      return function (buff) {
        return function () {
          buff[offset] = value;
        };
      };
    };
  };

  exports.copy = function (srcStart) {
    return function (srcEnd) {
      return function (src) {
        return function (targStart) {
          return function (targ) {
            return function () {
              return src.copy(targ, targStart, srcStart, srcEnd);
            };
          };
        };
      };
    };
  };

  exports.fill = function (octet) {
    return function (start) {
      return function (end) {
        return function (buf) {
          return function () {
            buf.fill(octet, start, end);
          };
        };
      };
    };
  };
})(PS["Node.Buffer.Internal"] = PS["Node.Buffer.Internal"] || {});
(function(exports) {
  /* global Buffer */
  "use strict";

  exports.create = function (size) {
    return Buffer.alloc(size);
  };

  exports.fromArray = function (octets) {
    return Buffer.from(octets);
  };

  exports.size = function (buff) {
    return buff.length;
  };

  exports.toArray = function (buff) {
    var json = buff.toJSON();
    return json.data || json;
  };

  exports.toArrayBuffer = function (buff) {
    return buff.buffer.slice(buff.byteOffset, buff.byteOffset + buff.byteLength);
  };

  exports.fromArrayBuffer = function (ab) {
    return Buffer.from(ab);
  };

  exports.fromStringImpl = function (str) {
    return function (encoding) {
      return Buffer.from(str, encoding);
    };
  };

  exports.readImpl = function (ty) {
    return function (offset) {
      return function (buf) {
        return buf["read" + ty](offset);
      };
    };
  };

  exports.readStringImpl = function (enc) {
    return function (start) {
      return function (end) {
        return function (buff) {
          return buff.toString(enc, start, end);
        };
      };
    };
  };

  exports.getAtOffsetImpl = function (just) {
    return function (nothing) {
      return function (offset) {
        return function (buff) {
          var octet = buff[offset];
          return octet == null ? nothing : just(octet);
        };
      };
    };
  };

  exports.toStringImpl = function (enc) {
    return function (buff) {
      return buff.toString(enc);
    };
  };

  exports.slice = function (start) {
    return function (end) {
      return function (buff) {
        return buff.slice(start, end);
      };
    };
  };

  exports.concat = function (buffs) {
    return Buffer.concat(buffs);
  };

  exports.concatToLength = function (buffs) {
    return function (totalLength) {
      return Buffer.concat(buffs, totalLength);
    };
  };
})(PS["Node.Buffer.Immutable"] = PS["Node.Buffer.Immutable"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Node.Buffer.Types"] = $PS["Node.Buffer.Types"] || {};
  var exports = $PS["Node.Buffer.Types"];
  var Data_Show = $PS["Data.Show"];                
  var UInt8 = (function () {
      function UInt8() {

      };
      UInt8.value = new UInt8();
      return UInt8;
  })();
  var UInt16LE = (function () {
      function UInt16LE() {

      };
      UInt16LE.value = new UInt16LE();
      return UInt16LE;
  })();
  var UInt16BE = (function () {
      function UInt16BE() {

      };
      UInt16BE.value = new UInt16BE();
      return UInt16BE;
  })();
  var UInt32LE = (function () {
      function UInt32LE() {

      };
      UInt32LE.value = new UInt32LE();
      return UInt32LE;
  })();
  var UInt32BE = (function () {
      function UInt32BE() {

      };
      UInt32BE.value = new UInt32BE();
      return UInt32BE;
  })();
  var Int8 = (function () {
      function Int8() {

      };
      Int8.value = new Int8();
      return Int8;
  })();
  var Int16LE = (function () {
      function Int16LE() {

      };
      Int16LE.value = new Int16LE();
      return Int16LE;
  })();
  var Int16BE = (function () {
      function Int16BE() {

      };
      Int16BE.value = new Int16BE();
      return Int16BE;
  })();
  var Int32LE = (function () {
      function Int32LE() {

      };
      Int32LE.value = new Int32LE();
      return Int32LE;
  })();
  var Int32BE = (function () {
      function Int32BE() {

      };
      Int32BE.value = new Int32BE();
      return Int32BE;
  })();
  var FloatLE = (function () {
      function FloatLE() {

      };
      FloatLE.value = new FloatLE();
      return FloatLE;
  })();
  var FloatBE = (function () {
      function FloatBE() {

      };
      FloatBE.value = new FloatBE();
      return FloatBE;
  })();
  var DoubleLE = (function () {
      function DoubleLE() {

      };
      DoubleLE.value = new DoubleLE();
      return DoubleLE;
  })();
  var DoubleBE = (function () {
      function DoubleBE() {

      };
      DoubleBE.value = new DoubleBE();
      return DoubleBE;
  })();
  var showBufferValueType = new Data_Show.Show(function (v) {
      if (v instanceof UInt8) {
          return "UInt8";
      };
      if (v instanceof UInt16LE) {
          return "UInt16LE";
      };
      if (v instanceof UInt16BE) {
          return "UInt16BE";
      };
      if (v instanceof UInt32LE) {
          return "UInt32LE";
      };
      if (v instanceof UInt32BE) {
          return "UInt32BE";
      };
      if (v instanceof Int8) {
          return "Int8";
      };
      if (v instanceof Int16LE) {
          return "Int16LE";
      };
      if (v instanceof Int16BE) {
          return "Int16BE";
      };
      if (v instanceof Int32LE) {
          return "Int32LE";
      };
      if (v instanceof Int32BE) {
          return "Int32BE";
      };
      if (v instanceof FloatLE) {
          return "FloatLE";
      };
      if (v instanceof FloatBE) {
          return "FloatBE";
      };
      if (v instanceof DoubleLE) {
          return "DoubleLE";
      };
      if (v instanceof DoubleBE) {
          return "DoubleBE";
      };
      throw new Error("Failed pattern match at Node.Buffer.Types (line 33, column 1 - line 47, column 29): " + [ v.constructor.name ]);
  });
  exports["showBufferValueType"] = showBufferValueType;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Node.Buffer.Immutable"] = $PS["Node.Buffer.Immutable"] || {};
  var exports = $PS["Node.Buffer.Immutable"];
  var $foreign = $PS["Node.Buffer.Immutable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Node_Buffer_Types = $PS["Node.Buffer.Types"];
  var Node_Encoding = $PS["Node.Encoding"];                
  var toString = function ($3) {
      return $foreign.toStringImpl(Node_Encoding.encodingToNode($3));
  };                                                     
  var readString = function ($4) {
      return $foreign.readStringImpl(Node_Encoding.encodingToNode($4));
  };
  var read = (function () {
      var $5 = Data_Show.show(Node_Buffer_Types.showBufferValueType);
      return function ($6) {
          return $foreign.readImpl($5($6));
      };
  })();
  var getAtOffset = $foreign.getAtOffsetImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = function (str) {
      var $7 = $foreign.fromStringImpl(str);
      return function ($8) {
          return $7(Node_Encoding.encodingToNode($8));
      };
  }; 
  var concat$prime = $foreign.concatToLength;
  exports["fromString"] = fromString;
  exports["read"] = read;
  exports["readString"] = readString;
  exports["toString"] = toString;
  exports["getAtOffset"] = getAtOffset;
  exports["concat'"] = concat$prime;
  exports["create"] = $foreign.create;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromArrayBuffer"] = $foreign.fromArrayBuffer;
  exports["toArray"] = $foreign.toArray;
  exports["toArrayBuffer"] = $foreign.toArrayBuffer;
  exports["concat"] = $foreign.concat;
  exports["slice"] = $foreign.slice;
  exports["size"] = $foreign.size;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Node.Buffer.Internal"] = $PS["Node.Buffer.Internal"] || {};
  var exports = $PS["Node.Buffer.Internal"];
  var $foreign = $PS["Node.Buffer.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];
  var Node_Buffer_Immutable = $PS["Node.Buffer.Immutable"];
  var Node_Buffer_Types = $PS["Node.Buffer.Types"];
  var Node_Encoding = $PS["Node.Encoding"];                
  var writeString = function (dictMonad) {
      return function ($20) {
          return $foreign.writeStringInternal(Node_Encoding.encodingToNode($20));
      };
  };
  var write = function (dictMonad) {
      var $21 = Data_Show.show(Node_Buffer_Types.showBufferValueType);
      return function ($22) {
          return $foreign.writeInternal($21($22));
      };
  };
  var unsafeThaw = function (dictMonad) {
      var $23 = Control_Applicative.pure(dictMonad.Applicative0());
      return function ($24) {
          return $23($24);
      };
  };
  var usingToImmutable = function (dictMonad) {
      return function (f) {
          return function (x) {
              return unsafeThaw(dictMonad)(f(x));
          };
      };
  };
  var unsafeFreeze = function (dictMonad) {
      var $25 = Control_Applicative.pure(dictMonad.Applicative0());
      return function ($26) {
          return $25($26);
      };
  };
  var usingFromImmutable = function (dictMonad) {
      return function (f) {
          return function (buf) {
              return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(f)(unsafeFreeze(dictMonad)(buf));
          };
      };
  };
  var toString = function (dictMonad) {
      return function (m) {
          return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toString(m));
      };
  };
  var toArrayBuffer = function (dictMonad) {
      return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toArrayBuffer);
  };
  var toArray = function (dictMonad) {
      return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toArray);
  };
  var slice = Node_Buffer_Immutable.slice;
  var size = function (dictMonad) {
      return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.size);
  };
  var readString = function (dictMonad) {
      return function (m) {
          return function (o) {
              return function (o$prime) {
                  return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.readString(m)(o)(o$prime));
              };
          };
      };
  };
  var read = function (dictMonad) {
      return function (t) {
          return function (o) {
              return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.read(t)(o));
          };
      };
  };
  var getAtOffset = function (dictMonad) {
      return function (o) {
          return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.getAtOffset(o));
      };
  };
  var fromString = function (dictMonad) {
      return function (s) {
          return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromString(s));
      };
  };
  var fromArrayBuffer = function (dictMonad) {
      return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromArrayBuffer);
  };
  var fromArray = function (dictMonad) {
      return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromArray);
  };
  var create = function (dictMonad) {
      return usingToImmutable(dictMonad)(Node_Buffer_Immutable.create);
  };
  var concat$prime = function (dictMonad) {
      return function (arrs) {
          return function (n) {
              return function (v) {
                  return Node_Buffer_Immutable["concat'"](arrs)(n);
              };
          };
      };
  };
  var concat = function (arrs) {
      return function (v) {
          return Node_Buffer_Immutable.concat(arrs);
      };
  };
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["unsafeThaw"] = unsafeThaw;
  exports["create"] = create;
  exports["fromArray"] = fromArray;
  exports["fromString"] = fromString;
  exports["fromArrayBuffer"] = fromArrayBuffer;
  exports["toArrayBuffer"] = toArrayBuffer;
  exports["read"] = read;
  exports["readString"] = readString;
  exports["toString"] = toString;
  exports["write"] = write;
  exports["writeString"] = writeString;
  exports["toArray"] = toArray;
  exports["getAtOffset"] = getAtOffset;
  exports["slice"] = slice;
  exports["size"] = size;
  exports["concat"] = concat;
  exports["concat'"] = concat$prime;
  exports["copyAll"] = $foreign.copyAll;
  exports["setAtOffset"] = $foreign.setAtOffset;
  exports["copy"] = $foreign.copy;
  exports["fill"] = $foreign.fill;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Node.Buffer"] = $PS["Node.Buffer"] || {};
  var exports = $PS["Node.Buffer"];
  var Effect = $PS["Effect"];
  var Node_Buffer_Class = $PS["Node.Buffer.Class"];
  var Node_Buffer_Internal = $PS["Node.Buffer.Internal"];          
  var mutableBufferEffect = new Node_Buffer_Class.MutableBuffer(function () {
      return Effect.monadEffect;
  }, Node_Buffer_Internal.concat, Node_Buffer_Internal["concat'"](Effect.monadEffect), Node_Buffer_Internal.copy, Node_Buffer_Internal.create(Effect.monadEffect), Node_Buffer_Internal.fill, Node_Buffer_Internal.copyAll, Node_Buffer_Internal.fromArray(Effect.monadEffect), Node_Buffer_Internal.fromArrayBuffer(Effect.monadEffect), Node_Buffer_Internal.fromString(Effect.monadEffect), Node_Buffer_Internal.getAtOffset(Effect.monadEffect), Node_Buffer_Internal.read(Effect.monadEffect), Node_Buffer_Internal.readString(Effect.monadEffect), Node_Buffer_Internal.setAtOffset, Node_Buffer_Internal.size(Effect.monadEffect), Node_Buffer_Internal.slice, Node_Buffer_Internal.copyAll, Node_Buffer_Internal.toArray(Effect.monadEffect), Node_Buffer_Internal.toArrayBuffer(Effect.monadEffect), Node_Buffer_Internal.toString(Effect.monadEffect), Node_Buffer_Internal.unsafeFreeze(Effect.monadEffect), Node_Buffer_Internal.unsafeThaw(Effect.monadEffect), Node_Buffer_Internal.write(Effect.monadEffect), Node_Buffer_Internal.writeString(Effect.monadEffect));
  exports["mutableBufferEffect"] = mutableBufferEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Actions_Context = $PS["Actions.Context"];
  var Actions_Core = $PS["Actions.Core"];
  var Actions_Exec = $PS["Actions.Exec"];
  var BuildLogs = $PS["BuildLogs"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_String_Regex_Unsafe = $PS["Data.String.Regex.Unsafe"];
  var Data_String_Utils = $PS["Data.String.Utils"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Helper = $PS["Helper"];
  var Inputs = $PS["Inputs"];
  var Lambda = $PS["Lambda"];
  var Node_Buffer = $PS["Node.Buffer"];
  var Node_Buffer_Class = $PS["Node.Buffer.Class"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Record = $PS["Record"];                
  var repoPath = Data_Array.intercalate(Data_Monoid.monoidString)("/")([ Actions_Context.repoOwner, Actions_Context.repoName ]);
  var mapTo = function (dictFunctor) {
      return Data_Function.flip(Data_Functor.map(dictFunctor));
  };
  var getLastBuildLog = function (content) {
      var removeCarriageReturn = Data_String_Regex.replace(Data_String_Regex_Unsafe.unsafeRegex("\x0d$")(Data_String_Regex_Flags.noFlags))("");
      var dropEmptyTails = function (a) {
          var $11 = Data_Maybe.maybe(false)(function (v) {
              return v === "";
          })(Data_Array.last(a));
          if ($11) {
              return Data_Array.dropEnd(1)(a);
          };
          return a;
      };
      var lines = dropEmptyTails(Data_String_Common.split("\x0a")(content));
      var targetLineCount = Data_Ord.min(Data_Ord.ordInt)(BuildLogs.maxAvailableLines)(Data_Array.length(lines));
      return {
          targetLines: Data_Functor.map(Data_Functor.functorArray)(removeCarriageReturn)(Data_Array.takeEnd(targetLineCount)(lines)),
          omitted: Data_Array.length(lines) > BuildLogs.maxAvailableLines
      };
  };
  var getCommitInfo = function (head) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"]("")))(function (outputStrings) {
          var handleStdout = function (b) {
              return function __do() {
                  var s = Node_Buffer_Class.toString(Node_Buffer.mutableBufferEffect)(Node_Encoding.UTF8.value)(b)();
                  return Effect_Ref.modify_(function (v) {
                      return v + s;
                  })(outputStrings)();
              };
          };
          return Control_Bind.bind(Effect_Aff.bindAff)(Actions_Exec.exec("git")([ "log", "--format=%cn%x09%B", "-n", "1", head ])({
              listeners: {
                  stdout: handleStdout
              }
          }))(function (exitCode) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Applicative.when(Effect.applicativeEffect)(exitCode !== 0)(Effect_Exception["throw"]("git log exited with code " + Data_Show.show(Data_Show.showInt)(exitCode)))))(function () {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)((function () {
                      var $28 = Helper.splitN("\x09")(2);
                      return function ($29) {
                          return $28(Data_String_Utils.trimEnd($29));
                      };
                  })())(Effect_Ref.read(outputStrings))))(function (parts) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                          committer: Data_Maybe.fromJust()(Data_Array.index(parts)(0)),
                          message: Data_Maybe.fromJust()(Data_Array.index(parts)(1)),
                          sha: head
                      });
                  });
              });
          });
      });
  };
  var constructBuildLogLines = function (workspacePath) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Apply.apply(Effect_Aff.applyParAff)(Data_Functor.map(Effect_Aff.functorParAff)(function (v) {
          return function (v1) {
              return {
                  buildlog: v,
                  rawbuildlog: v1
              };
          };
      })(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(BuildLogs.loadLogs(BuildLogs.buildlogPath(workspacePath)))))(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(BuildLogs.loadLogs(BuildLogs.rawbuildlogPath(workspacePath))))))(function (v) {
          var supportInfoRawLogs = Data_Maybe.fromMaybe("")(v.rawbuildlog);
          var supportInfoBuildLogs = Data_Function.flip(Data_Maybe.maybe(""))(v.buildlog)(function (l) {
              var v1 = getLastBuildLog(l);
              var lines = (function () {
                  if (v1.omitted) {
                      return Data_Array.concat([ [ "..." ], v1.targetLines ]);
                  };
                  return v1.targetLines;
              })();
              return "```\x0a" + (Data_Array.intercalate(Data_Monoid.monoidString)("\x0a")(lines) + "\x0a```");
          });
          var needsPreLineFeed = supportInfoRawLogs !== "" && !Data_String_Utils.endsWith("\x0a")(supportInfoRawLogs);
          var logLines = Data_Array.fold(Data_Monoid.monoidString)([ supportInfoRawLogs, (function () {
              if (needsPreLineFeed) {
                  return "\x0a";
              };
              return "";
          })(), supportInfoBuildLogs ]);
          return Control_Applicative.pure(Effect_Aff.applicativeAff)((function () {
              var $20 = Data_String_Common["null"](logLines);
              if ($20) {
                  return Data_Maybe.Nothing.value;
              };
              return new Data_Maybe.Just(logLines);
          })());
      });
  };
  var constructBranchPayload = function (common) {
      return mapTo(Effect_Aff.functorAff)(getCommitInfo(Actions_Context.sha))(function (commit) {
          return Lambda.Branch.create(Record.merge()()(common)({
              branch_name: Data_String_Regex.replace(Data_String_Regex_Unsafe.unsafeRegex("^refs/heads/")(Data_String_Regex_Flags.noFlags))("")(Actions_Context.ref),
              commit: commit
          }));
      });
  };
  var buildRunsUrl = function (id) {
      return Data_Array.fold(Data_Monoid.monoidString)([ "https://github.com/", repoPath, "/actions/runs/", Data_Show.show(Data_Show.showInt)(id) ]);
  };
  var buildCompareUrl = function (base) {
      return function (head) {
          return Data_Array.fold(Data_Monoid.monoidString)([ "https://github.com/", repoPath, "/compare/", base, "..", head ]);
      };
  };
  var constructDiffPayload = function (common) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Inputs.headSha))(function (headSha) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Inputs.baseSha))(function (baseSha) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Inputs.prNumber))(function (pr_number) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Inputs.prTitle))(function (pr_name) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Maybe.fromJust())(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Actions_Core.headRef)))(function (ref) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(getCommitInfo(headSha))(function (commit) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Lambda.Diff.create(Record.merge()()(common)({
                                  compare_url: buildCompareUrl(baseSha)(headSha),
                                  commit_hash: headSha,
                                  ref: ref,
                                  pr_number: pr_number,
                                  pr_name: pr_name,
                                  commit: commit
                              })));
                          });
                      });
                  });
              });
          });
      });
  };
  var main = Effect_Aff.launchAff_(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Inputs.duration))(function (duration) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Inputs.status))(function (status) {
          return Control_Bind.bind(Effect_Aff.bindAff)((function () {
              var $23 = !Inputs.succeeded(status);
              if ($23) {
                  return Data_Functor.map(Effect_Aff.functorAff)(Data_Maybe.Just.create)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Inputs.failureStep));
              };
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
          })())(function (failureStep) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Inputs.reportName))(function (reportName) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Actions_Core.workspacePath))(constructBuildLogLines))(function (supportInfo) {
                      var commonPayload = {
                          status: status,
                          failure_step: failureStep,
                          build_url: buildRunsUrl(Actions_Context.runId),
                          number: Actions_Context.runNumber,
                          duration: Data_Int.round(Data_Newtype.unwrap()(duration)),
                          repository: repoPath,
                          report_name: reportName,
                          support_info: supportInfo
                      };
                      return Control_Bind.bind(Effect_Aff.bindAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Inputs.mode))(function (v) {
                          if (v instanceof Inputs.Diff) {
                              return constructDiffPayload(commonPayload);
                          };
                          if (v instanceof Inputs.Branch) {
                              return constructBranchPayload(commonPayload);
                          };
                          throw new Error("Failed pattern match at Main (line 137, column 40 - line 139, column 57): " + [ v.constructor.name ]);
                      }))(function (payload) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff)(Lambda.invoke(payload)))(function (r) {
                              if (r instanceof Data_Either.Left) {
                                  return Effect_Class_Console.error(Effect_Aff.monadEffectAff)("Invocation Failed! " + Effect_Exception.message(r.value0));
                              };
                              if (r instanceof Data_Either.Right) {
                                  return Effect_Class_Console.log(Effect_Aff.monadEffectAff)("Invocation OK");
                              };
                              throw new Error("Failed pattern match at Main (line 141, column 3 - line 143, column 45): " + [ r.constructor.name ]);
                          });
                      });
                  });
              });
          });
      });
  }));
  exports["repoPath"] = repoPath;
  exports["buildRunsUrl"] = buildRunsUrl;
  exports["buildCompareUrl"] = buildCompareUrl;
  exports["getCommitInfo"] = getCommitInfo;
  exports["getLastBuildLog"] = getLastBuildLog;
  exports["constructDiffPayload"] = constructDiffPayload;
  exports["mapTo"] = mapTo;
  exports["constructBranchPayload"] = constructBranchPayload;
  exports["constructBuildLogLines"] = constructBuildLogLines;
  exports["main"] = main;
})(PS);
PS["Main"].main();